#!/bin/env python3
from sys import argv
from argparse import ArgumentParser
from os.path import expanduser
from random import choices, randint

VOWELS = 'aeiouy'
AFTER = {}


def draw(dictionary):
    letters = list(dictionary.keys())
    weights = list(dictionary.values())
    return choices(letters, weights, k=1)[0]


def tail(previous, n):
    if n <= 0:
        return ''
    else:
        current = draw(AFTER[previous])
        return current + tail(current, n - 1)


# 2D matrix with weights for choosing one letter after another
# First row contains weights for choosing the first letter of a word
with open(expanduser('~/scripts/letter-weights.csv')) as data:
    letters = 'abcdefghijklmnopqrstuvwxyz'
    for (first, line) in zip(iter('^' + letters), data.readlines()):
        AFTER[first] = {}
        for (second, weight) in zip(iter(letters), line.split(',')):
            # Bias weights, so that interlaced consonants and vowels are more likely
            bias = 1.0 if first == '^' or (first in VOWELS) ^ (second in VOWELS) else 0.7
            AFTER[first][second] = float(weight) * bias

parser = ArgumentParser(prog=argv[0])
parser.add_argument('-l', '--length', type=int, default=randint(4, 10))
parser.add_argument('-i', '--init', type=str, default='')
args = parser.parse_args()

length = args.length
init = args.init.lower() or draw(AFTER['^'])

if length < 0:
    print('error: length cannot be negative!')
    exit(1)
elif length > 0:
    name = init + tail(init[-1], length - 1)
    print(name.capitalize())
